generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          BigInt   @id @default(autoincrement())
  username    String   @unique
  password    String
  displayName String?
  avatarUrl   String?
  status      Status   @default(OFFLINE)
  createdAt   DateTime @default(now())

  friends          Friend[]      @relation("UserFriends")
  friendOf         Friend[]      @relation("UserFriends_Friend")
  devices          Device[]
  messagesSent     Message[]     @relation("MessagesSent")
  messagesReceived Message[]     @relation("MessagesReceived")
  groupMembers     GroupMember[]
}

model Friend {
  id        BigInt       @id @default(autoincrement())
  user      User         @relation("UserFriends", fields: [userId], references: [id])
  userId    BigInt
  friend    User         @relation("UserFriends_Friend", fields: [friendId], references: [id])
  friendId  BigInt
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

model Group {
  id        BigInt   @id @default(autoincrement())
  name      String?
  avatarUrl String?
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())

  members  GroupMember[]
  messages Message[]
}

model GroupMember {
  id       BigInt    @id @default(autoincrement())
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  BigInt
  user     User      @relation(fields: [userId], references: [id])
  userId   BigInt
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())
}

model Message {
  id         BigInt        @id @default(autoincrement())
  group      Group?        @relation(fields: [groupId], references: [id])
  groupId    BigInt?
  sender     User          @relation("MessagesSent", fields: [senderId], references: [id])
  senderId   BigInt
  receiver   User?         @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId BigInt?
  content    String
  type       MessageType   @default(TEXT)
  status     MessageStatus @default(SENT)
  createdAt  DateTime      @default(now())
}

model Device {
  id         BigInt    @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     BigInt
  deviceId   String
  deviceName String?
  lastSeen   DateTime?
  isOnline   Boolean   @default(false)
}

enum Status {
  ONLINE
  OFFLINE
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum GroupRole {
  MEMBER
  ADMIN
  OWNER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VIDEO
}

enum MessageStatus {
  SENT
  DELIVERED
  SEEN
}
